@page "/"
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>SignalR Chat</PageTitle>
<h3>SignalR Chat</h3>

<style>
    #my-text {
        width: 100%;
        height: 500px;
        background-color: #abb9ff;
        border: solid 1px black;
        border-radius: 5px;
        font-size: 12px;
    }
</style>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="Adınız Nedir?" />
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <textarea id="my-text" readonly="readonly" @ref="TextAreaRef">
        @messages
                                                </textarea>
    <div class="input-group">
        <input @bind-value="message"
           @bind-value:event="oninput"
           @onkeydown="HandleInput"
           class="form-control" />
        <button class="btn btn-primary form-group-append"
            @onclick="Send"
            disabled="@(!IsConnected)">
            Mesaj Gönder
        </button>
    </div>
}

@code
{
    private HubConnection? hubConnection;
    private string messages = String.Empty;
    private string username = String.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage", username, message);
            message = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
